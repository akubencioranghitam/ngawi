local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

getgenv().SecureMode = true -- Enable Secure Mode to reduce detection

local Window = Rayfield:CreateWindow({
    Name = "NGAWI Hub",
    LoadingTitle = "Ini Bikinan Gw",
    LoadingSubtitle = "Sang Raja Malapetaka",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ESPSettings",
        FileName = "ESP_Config"
    },
    KeySystem = false
})

Rayfield:LoadConfiguration()

local Tab = Window:CreateTab("ESP Controls", 4483362458)

local HealthBars = {}
local ESP = { ShowHealthBar = true, Enabled = false, TeamCheck = false, ShowBox = true, ShowDistance = true, ShowTracer = true, Transparency = 0.5, Color = Color3.fromRGB(255, 0, 0) }

local camera = workspace.CurrentCamera
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local drawings = {}
local textLabels = {}
local tracers = {}
local HealthBars = {}

local function removeESP(player)
    if drawings[player] then
        drawings[player]:Remove()
        drawings[player] = nil
    end
    if textLabels[player] then
        textLabels[player]:Remove()
        textLabels[player] = nil
    end
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
    if HealthBars[player] then
        HealthBars[player]:Remove()
        HealthBars[player] = nil
    end
end

local function clearAllESP()
    for player, _ in pairs(drawings) do
        removeESP(player)
    end
end

local function updateESP()
    for player, box in pairs(drawings) do
        if ESP.Enabled and player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if ESP.TeamCheck and player.Team == players.LocalPlayer.Team then
                box.Visible = false
                textLabels[player].Visible = false
                tracers[player].Visible = false
                if HealthBars[player] then HealthBars[player].Visible = false end
            else
                local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    local healthRatio = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                    local rootPart = player.Character.HumanoidRootPart
                    local position, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                    local distance = (camera.CFrame.Position - rootPart.Position).Magnitude
                    
                    if onScreen then
                        local size = math.clamp(2000 / position.Z, 20, 300)
                        local xPos = position.X - size / 2
                        local yPos = position.Y - size * 0.75
                        
                        -- Update ESP Box
                        box.Size = Vector2.new(size, size * 1.5)
                        box.Position = Vector2.new(xPos, yPos)
                        box.Transparency = ESP.Transparency
                        box.Color = ESP.Color
                        box.Visible = ESP.ShowBox
                        
                        -- Update Distance Text
                        local text = textLabels[player]
                        text.Position = Vector2.new(position.X, position.Y - size)
                        text.Text = string.format("%.1f meters", distance)
                        text.Visible = ESP.ShowDistance
                        
                        -- Update Tracer
                        local tracer = tracers[player]
                        tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                        tracer.To = Vector2.new(position.X, position.Y)
                        tracer.Transparency = ESP.Transparency
                        tracer.Color = ESP.TeamCheck and player.Team == players.LocalPlayer.Team and Color3.fromRGB(0, 0, 0) or ESP.Color
                        tracer.Visible = ESP.ShowTracer
                        
                        -- Update Health Bar
                        if ESP.ShowHealthBar and HealthBars[player] then
                            local healthBar = HealthBars[player]
                            healthBar.Size = Vector2.new(5, size * 1.5 * healthRatio)
                            healthBar.Position = Vector2.new(xPos - 10, yPos + (size * 1.5) * (1 - healthRatio))
                            healthBar.Color = Color3.fromRGB(math.floor(255 - (255 * healthRatio)), math.floor(255 * healthRatio), 0)
                            healthBar.Visible = true
                        else
                            if HealthBars[player] then HealthBars[player].Visible = false end
                        end
                    else
                        box.Visible = false
                        textLabels[player].Visible = false
                        tracers[player].Visible = false
                        if HealthBars[player] then HealthBars[player].Visible = false end
                    end
                end
            end
        else
            removeESP(player)
        end
    end
end

local function createESP(player)
    if not ESP.Enabled then return end -- Don't create ESP unless enabled

    if not drawings[player] and player ~= players.LocalPlayer then
        local espBox = Drawing.new("Square")
        espBox.Thickness = 2
        espBox.Filled = false
        espBox.Visible = false
        
        local espText = Drawing.new("Text")
        espText.Size = 16
        espText.Center = true
        espText.Outline = true
        espText.Visible = false
        espText.Color = Color3.fromRGB(255, 255, 255)
        
        local tracer = Drawing.new("Line")
        tracer.Thickness = 1
        tracer.Visible = false
        
        local healthBar = Drawing.new("Square")
        healthBar.Filled = true
        healthBar.Thickness = 1
        healthBar.Visible = false
        healthBar.Color = Color3.fromRGB(0, 255, 0)

        drawings[player] = espBox
        textLabels[player] = espText
        tracers[player] = tracer
        HealthBars[player] = healthBar
    end
end

players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        wait(0.5) -- Short delay to prevent missing ESP  
        removeESP(player) -- Clean up any old ESP  
        createESP(player) -- Create ESP for new character  
    end)
end)

players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)

local function setupESPForPlayer(player)
    if not ESP.Enabled then return end -- Don't create ESP unless enabled

    print("Setting up ESP for:", player.Name)

    local function onCharacterAdded(character)
        wait(0.5) -- Ensure character loads
        if character:FindFirstChild("HumanoidRootPart") then
            removeESP(player) -- Remove old ESP
            createESP(player) -- Recreate ESP
            print("ESP applied to:", player.Name)
        else
            print("HumanoidRootPart missing for:", player.Name)
        end
    end

    local function onCharacterRemoving()
        removeESP(player) -- Cleanup ESP when character resets
    end

    -- Connect CharacterAdded and CharacterRemoving events
    player.CharacterAdded:Connect(onCharacterAdded)
    player.CharacterRemoving:Connect(onCharacterRemoving)

    -- If player already has a character, create ESP immediately
    if ESP.Enabled and player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Apply ESP to all existing players
if ESP.Enabled then
    for _, player in pairs(players:GetPlayers()) do
        setupESPForPlayer(player)
    end
end

-- Apply ESP to new players who join later
players.PlayerAdded:Connect(setupESPForPlayer)

runService.RenderStepped:Connect(updateESP)

local ToggleESP = Tab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Flag = "ToggleESP",
    Callback = function(Value)
        ESP.Enabled = Value
        if Value then
            for _, player in pairs(players:GetPlayers()) do
                setupESPForPlayer(player) -- Create ESP when toggled ON
            end
        else
            clearAllESP() -- Remove ESP when toggled OFF
        end
    end
})

local ToggleBox = Tab:CreateToggle({
    Name = "Enable Box",
    CurrentValue = true,
    Flag = "ToggleBox",
    Callback = function(Value)
        ESP.ShowBox = Value
    end
})

local ToggleHealthBar = Tab:CreateToggle({
    Name = "Enable Health Bar",
    CurrentValue = true,
    Flag = "ToggleHealthBar",
    Callback = function(Value)
        ESP.ShowHealthBar = Value
    end
})

local ToggleTracer = Tab:CreateToggle({
    Name = "Enable Tracer",
    CurrentValue = true,
    Flag = "ToggleTracer",
    Callback = function(Value)
        ESP.ShowTracer = Value
    end
})

local ToggleDistance = Tab:CreateToggle({
    Name = "Enable Distance",
    CurrentValue = true,
    Flag = "ToggleDistance",
    Callback = function(Value)
        ESP.ShowDistance = Value
    end
})

local ToggleTeamCheck = Tab:CreateToggle({
    Name = "Enable Team Check",
    CurrentValue = ESP.TeamCheck,
    Flag = "ToggleTeamCheck",
    Callback = function(Value)
        ESP.TeamCheck = Value
    end
})

local ColorPicker = Tab:CreateColorPicker({
    Name = "ESP Color",
    Flag = "ESPColor",
    Color = ESP.Color,
    Callback = function(Color)
        ESP.Color = Color
        for _, box in pairs(drawings) do
            if box then
                box.Color = Color
            end
        end
        for _, tracer in pairs(tracers) do
            if tracer then
                tracer.Color = Color
            end
        end
    end
})

local Slider = Tab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "Transparency",
    CurrentValue = ESP.Transparency,
    Flag = "SliderTransparency",
    Callback = function(Value)
        ESP.Transparency = Value
        for _, box in pairs(drawings) do
            if box then
                box.Transparency = Value
            end
        end
        for _, tracer in pairs(tracers) do
            if tracer then
                tracer.Transparency = Value
            end
        end
    end
})

-- Create Aimbot Tab
local AimbotTab = Window:CreateTab("Aimbot Controls", 4483362458)

-- Services
local players = game:GetService("Players")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = players.LocalPlayer
local drawing = Drawing.new

-- Aimbot Settings
getgenv().AimbotSettings = {
    Enabled = false,
    TeamCheck = false,
    AliveCheck = true,
    WallCheck = false,
    LockPart = "Head",
    Smoothness = 0.1,
    TriggerKey = Enum.UserInputType.MouseButton2,
    FOVSettings = {
        Enabled = true,
        Visible = true,
        Radius = 90,
        Thickness = 1,
        Transparency = 1,
        Color = Color3.fromRGB(255, 255, 255),
        OutlineColor = Color3.fromRGB(0, 0, 0)
    }
}

local Settings = getgenv().AimbotSettings
local LockedTarget = nil

-- Create FOV Circle
local FOVCircle = drawing("Circle")
FOVCircle.Radius = Settings.FOVSettings.Radius
FOVCircle.Thickness = Settings.FOVSettings.Thickness
FOVCircle.Filled = false
FOVCircle.Color = Settings.FOVSettings.Color
FOVCircle.Transparency = Settings.FOVSettings.Transparency
FOVCircle.Visible = Settings.FOVSettings.Visible

-- Update FOV Circle Position
runService.RenderStepped:Connect(function()
    FOVCircle.Position = userInputService:GetMouseLocation()
    FOVCircle.Visible = Settings.FOVSettings.Visible
end)

-- Get Closest Target
local function GetClosestPlayer()
    local closestTarget = nil
    local shortestDistance = Settings.FOVSettings.Radius

    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(Settings.LockPart) then
            
            -- ✅ Team Check: Works for games with different team systems
            if Settings.TeamCheck then
                if player.Team ~= nil and localPlayer.Team ~= nil then
                    if player.Team == localPlayer.Team then
                        continue -- Skip teammates
                    end
                elseif player.Character:FindFirstChild("TeamColor") and localPlayer.Character:FindFirstChild("TeamColor") then
                    if player.Character.TeamColor.Value == localPlayer.Character.TeamColor.Value then
                        continue -- Skip teammates based on TeamColor
                    end
                end
            end

            local part = player.Character[Settings.LockPart]
            local screenPosition, onScreen = camera:WorldToViewportPoint(part.Position)
            local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - userInputService:GetMouseLocation()).Magnitude

            if onScreen and distance < shortestDistance then
                shortestDistance = distance
                closestTarget = part
            end
        end
    end
    return closestTarget
end

-- Bullet Drop Functionality --
local function GetBulletDrop(height, DepthPlayerTarget)
    local pitch = math.atan2(height, DepthPlayerTarget)
    local BulletVelocityXY = BulletVelocity * math.cos(pitch)
    local Time = DepthPlayerTarget / BulletVelocityXY
    local TotalVerticalDrop = 0.5 * GravityAcceleration * Time * Time
    return TotalVerticalDrop
end

-- Aimbot Functionality (Smooth Aim Assist)
local function AimAtTarget()
    if not Settings.Enabled or not LockedTarget then return end
    local targetPosition = LockedTarget.Position

    -- Bullet Drop Calculation
    if Settings.BulletDropPrediction then
        local heightDifference = targetPosition.Y - camera.CFrame.Position.Y
        local horizontalDistance = (Vector3.new(targetPosition.X, camera.CFrame.Position.Y, targetPosition.Z) - camera.CFrame.Position).Magnitude
        local bulletDrop = GetBulletDrop(heightDifference, horizontalDistance)

        targetPosition = targetPosition + Vector3.new(0, bulletDrop, 0) -- Adjust for bullet drop
    end

    local newCFrame = CFrame.new(camera.CFrame.Position, targetPosition)
    camera.CFrame = camera.CFrame:Lerp(newCFrame, Settings.Smoothness)
end

-- Update Aimbot While Holding
runService.RenderStepped:Connect(function()
    if Settings.Enabled and Settings.Holding then
        LockedTarget = GetClosestPlayer() -- Constantly update the target
        AimAtTarget()
    end
end)

-- User Input Detection
userInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Settings.TriggerKey then
        Settings.Holding = true
    end
end)

userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Settings.TriggerKey then
        Settings.Holding = false
        LockedTarget = nil -- Allow new target selection
    end
end)

-- UI Controls (Aimbot)
local ToggleAimbot = AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "ToggleAimbot",
    Callback = function(Value)
        Settings.Enabled = Value
    end
})

local ToggleTeamCheck = AimbotTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "ToggleTeamCheck",
    Callback = function(Value)
        Settings.TeamCheck = Value
    end
})

local TargetPartDropdown = AimbotTab:CreateDropdown({
    Name = "Target Body Part",
    Options = {"Head", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
    CurrentOption = {Settings.LockPart},
    MultipleOptions = false,
    Flag = "TargetPartDropdown",
    Callback = function(Option)
        Settings.LockPart = Option[1] -- Update the target body part
        print("Targeting Part Set To:", Option[1]) -- Debugging print
    end,
})

local ToggleFOV = AimbotTab:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = Settings.FOVSettings.Visible,
    Flag = "ToggleFOV",
    Callback = function(Value)
        Settings.FOVSettings.Visible = Value
        FOVCircle.Visible = Value -- Instantly update visibility
        print("FOV Circle Visibility:", Value) -- Debugging print
    end
})

local FOVSlider = AimbotTab:CreateSlider({
    Name = "FOV Radius",
    Range = {10, 500},
    Increment = 5,
    CurrentValue = Settings.FOVSettings.Radius,
    Flag = "FOVSlider",
    Callback = function(Value)
        Settings.FOVSettings.Radius = Value
        FOVCircle.Radius = Value -- Apply change to the FOV circle immediately
        print("FOV Radius Set To:", Value) -- Debugging print
    end
})

local ColorPicker = AimbotTab:CreateColorPicker({
    Name = "FOV Circle Color",
    Color = Settings.FOVSettings.Color, -- Default to current FOV color
    Flag = "FOVColorPicker",
    Callback = function(Value)
        Settings.FOVSettings.Color = Value
        FOVCircle.Color = Value -- Apply color change instantly
        print("FOV Circle Color Set To:", Value) -- Debugging print
    end
})

local SmoothnessSlider = AimbotTab:CreateSlider({
    Name = "Smoothness",
    Range = {0.01, 1},
    Increment = 0.01,
    CurrentValue = Settings.Smoothness,
    Flag = "SmoothnessSlider",
    Callback = function(Value)
        Settings.Smoothness = Value
    end
})

local ToggleAimbotKeybind = AimbotTab:CreateKeybind({
    Name = "Toggle Aimbot",
    CurrentKeybind = "Q",
    HoldToInteract = false, 
    Flag = "ToggleAimbotKeybind",
    Callback = function()
        Settings.Enabled = not Settings.Enabled
        Rayfield.Flags["ToggleAimbot"]:Set(Settings.Enabled) -- Sync with the UI toggle
        print("Aimbot Enabled:", Settings.Enabled) -- Debugging print
    end,
})

print("HUB Loaded")
